# -*- coding: utf-8 -*-
"""prova ia2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1dXydUzhd1eIkGQfKVub40tjfdpWrAy-J
"""

##################### Questão 1
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.linear_model import Lasso, Ridge
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import train_test_split, cross_val_score, KFold
from sklearn.metrics import mean_squared_error, r2_score
from sklearn.model_selection import GridSearchCV


alunos_notas = pd.read_csv(r"/content/Student_Marks.csv")
print(alunos_notas)
alunos_notas2 = alunos_notas.rename(columns={"number_courses":"Número de matérias",
                                    "time_study": "Tempo de estudo",
                                    "Marks": "Notas"})

print(alunos_notas2.head())
#print(alunos_notas2.isnull().sum())


X =  alunos_notas2.drop("Notas", axis= 1).values
y = alunos_notas2["Notas"].values
nomes = alunos_notas2.drop("Notas", axis= 1).columns
lasso = Lasso(alpha= 0.1)
lasso_coef = lasso.fit(X, y).coef_

#fig = plt.figure(facecolor='#EFF1F1')

plt.bar(nomes, lasso_coef, color = "#CE5374", edgecolor = "#9C0D38")
plt.xticks(rotation = 45)
plt.show()


# print(alunos_notas2["Número de matérias"].value_counts()) #quantidade de cursos escolhidos por alunos
# print(alunos_notas2["Tempo de estudo"].value_counts()) #tempo de estudo
# print(alunos_notas2["Notas"].value_counts()) #notas

#print(alunos_notas.describe)

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

reg_lin = LinearRegression()
reg_lin.fit(X_train, y_train)
y_pred = reg_lin.predict(X_test)
reg_lin.score(X_test, y_test)

print("score: ", reg_lin.score(X_test, y_test))
print("erro médio quadrático: ", mean_squared_error(y_test, y_pred, squared= False))

##################### Questão 2
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.linear_model import Lasso, Ridge
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import train_test_split, cross_val_score, KFold
from sklearn.metrics import mean_squared_error, r2_score
from sklearn.model_selection import GridSearchCV


X = alunos_notas2[["Tempo de estudo"]].values
y = alunos_notas2["Notas"].values

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

reg_lin = LinearRegression()
reg_lin.fit(X_train, y_train)
y_pred = reg_lin.predict(X_test)

rmse = mean_squared_error(y_test, y_pred, squared= False)

plt.scatter(X_test, y_test, color='#CE5374', edgecolor = "#9C0D38", label='Nuvem de atributos')
plt.plot(X_test, y_pred, color= '#43C59E', linewidth=1, label='Reta de regressão')
plt.xlabel('Tempo de estudo')
plt.ylabel('Notas')
plt.legend()
plt.show()

##################### Questão 3
X = alunos_notas2[['Tempo de estudo', 'Número de matérias']].values
y = alunos_notas2['Notas'].values

parametros_lasso = {'alpha': [0.001, 0.01, 0.1, 1, 10]}
parametros_ridge = {'alpha': [0.001, 0.01, 0.1, 1, 10]}

regressor_lasso = Lasso()
grid_search_lasso = GridSearchCV(regressor_lasso, parametros_lasso, cv=5)
grid_search_lasso.fit(X, y)
melhor_param_lasso = grid_search_lasso.best_params_
melhor_score_lasso = grid_search_lasso.best_score_
print("Melhores parâmetros para Lasso:", melhor_param_lasso)
print("Melhor score para Lasso:", melhor_score_lasso)

regressor_ridge = Ridge()
grid_search_ridge = GridSearchCV(regressor_ridge, parametros_ridge, cv=5)
grid_search_ridge.fit(X, y)
melhor_param_ridge = grid_search_ridge.best_params_
melhor_score_ridge = grid_search_ridge.best_score_
print("Melhores parâmetros para Ridge:", melhor_param_ridge)
print("Melhor score para Ridge:", melhor_score_ridge)

##################### Questão 4
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.linear_model import Lasso, Ridge
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import train_test_split, cross_val_score, KFold
from sklearn.metrics import mean_squared_error, r2_score
from sklearn.model_selection import GridSearchCV


X = alunos_notas2.drop("Notas", axis=1)
y = alunos_notas2["Notas"]

# Definir os melhores parâmetros encontrados
melhor_param_lasso = {'alpha': 0.1}
melhor_param_ridge = {'alpha': 10}

# Criar os regressores Lasso e Ridge com os melhores parâmetros
regressor_lasso = Lasso(**melhor_param_lasso)
regressor_ridge = Ridge(**melhor_param_ridge)

# Definir o número de folds para K-Fold Cross-Validation
n_folds = 5

# Realizar K-Fold Cross-Validation para Lasso
kf_lasso = KFold(n_splits=n_folds, shuffle=True, random_state=42)
scores_lasso = cross_val_score(regressor_lasso, X, y, cv=kf_lasso)

# Realizar K-Fold Cross-Validation para Ridge
kf_ridge = KFold(n_splits=n_folds, shuffle=True, random_state=42)
scores_ridge = cross_val_score(regressor_ridge, X, y, cv=kf_ridge)

# Imprimir os scores médios para Lasso e Ridge
print("Score médio para Lasso:", np.mean(scores_lasso))
print("Score médio para Ridge:", np.mean(scores_ridge))